
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000053e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000053e  000005b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f47  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000890  00000000  00000000  00001607  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000767  00000000  00000000  00001e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00002600  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003de  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a08  00000000  00000000  00002aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000034ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	78 00       	.word	0x0078	; ????
  56:	5b 00       	.word	0x005b	; ????
  58:	7a 00       	.word	0x007a	; ????
  5a:	5d 00       	.word	0x005d	; ????
  5c:	5f 00       	.word	0x005f	; ????
  5e:	61 00       	.word	0x0061	; ????
  60:	63 00       	.word	0x0063	; ????
  62:	65 00       	.word	0x0065	; ????
  64:	67 00       	.word	0x0067	; ????
  66:	69 00       	.word	0x0069	; ????
  68:	6b 00       	.word	0x006b	; ????
  6a:	6d 00       	.word	0x006d	; ????
  6c:	6f 00       	.word	0x006f	; ????
  6e:	71 00       	.word	0x0071	; ????
  70:	73 00       	.word	0x0073	; ????
  72:	75 00       	.word	0x0075	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ee e3       	ldi	r30, 0x3E	; 62
  88:	f5 e0       	ldi	r31, 0x05	; 5
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 38       	cpi	r26, 0x82	; 130
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  9a:	0c 94 9d 02 	jmp	0x53a	; 0x53a <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Key_configuration>:


unsigned char Key_configuration(unsigned char x)
{
	
	switch (x){
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	fc 01       	movw	r30, r24
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	e0 31       	cpi	r30, 0x10	; 16
  aa:	f1 05       	cpc	r31, r1
  ac:	00 f5       	brcc	.+64     	; 0xee <Key_configuration+0x4c>
  ae:	e6 5d       	subi	r30, 0xD6	; 214
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__tablejump2__>
		case 1:
		return 7 ;
		break;
		
		case 2:
		return 8 ;
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	08 95       	ret
		case 3:
		return 9 ;
		break;
		
		case 4:
		return '/' ;
  ba:	8f e2       	ldi	r24, 0x2F	; 47
  bc:	08 95       	ret
		break;
		
		case 5:
		return 4 ;
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	08 95       	ret
		break;
		
		case 6:
		return 5 ;
  c2:	85 e0       	ldi	r24, 0x05	; 5
  c4:	08 95       	ret
		break;
		
		case 7:
		return 6 ;
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	08 95       	ret
		break;
		
		case 8:
		return '*' ;
  ca:	8a e2       	ldi	r24, 0x2A	; 42
  cc:	08 95       	ret
		break;
		
		case 9:
		return 1 ;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	08 95       	ret
		break;
		
		case 10:
		return 2 ;
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	08 95       	ret
		break;
		
		case 11:
		return 3 ;
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	08 95       	ret
		break;
		
		case 12:
		return '-' ;
  da:	8d e2       	ldi	r24, 0x2D	; 45
  dc:	08 95       	ret
		break;
		
		case 13:
		return 'R' ;
  de:	82 e5       	ldi	r24, 0x52	; 82
  e0:	08 95       	ret
		break;
		
		case 14:
		return 0 ;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 95       	ret
		break;
		
		case 15:
		return '=' ;
  e6:	8d e3       	ldi	r24, 0x3D	; 61
  e8:	08 95       	ret
		break;
		
		case 16:
		return '+' ;
  ea:	8b e2       	ldi	r24, 0x2B	; 43
  ec:	08 95       	ret
		break;
		
		default:
		break;
	}
  ee:	08 95       	ret
{
	
	switch (x){
	
		case 1:
		return 7 ;
  f0:	87 e0       	ldi	r24, 0x07	; 7
  f2:	08 95       	ret
		case 2:
		return 8 ;
		break;
		
		case 3:
		return 9 ;
  f4:	89 e0       	ldi	r24, 0x09	; 9
		break;
		
		default:
		break;
	}
  f6:	08 95       	ret

000000f8 <Get_Pressed_key>:

unsigned char Key_configuration(unsigned char x) ; 

unsigned char Get_Pressed_key(void)
{
	DDRC|=0b11110000 ; 
  f8:	84 b3       	in	r24, 0x14	; 20
  fa:	80 6f       	ori	r24, 0xF0	; 240
  fc:	84 bb       	out	0x14, r24	; 20
	DDRC&=0xF0 ; 
  fe:	84 b3       	in	r24, 0x14	; 20
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	84 bb       	out	0x14, r24	; 20
	PORTC|=0x0F ; 
 104:	85 b3       	in	r24, 0x15	; 21
 106:	8f 60       	ori	r24, 0x0F	; 15
 108:	85 bb       	out	0x15, r24	; 21
	while(1){
	for (unsigned char col = 0 ; col<4 ; col++){
		PORTC|=0xF0 ;
		PORTC&= ~(1<<(col+4)) ;
 10a:	e1 e0       	ldi	r30, 0x01	; 1
 10c:	f0 e0       	ldi	r31, 0x00	; 0
#include "get_pressed_key.h"

unsigned char Key_configuration(unsigned char x) ; 

unsigned char Get_Pressed_key(void)
{
 10e:	64 e0       	ldi	r22, 0x04	; 4
 110:	70 e0       	ldi	r23, 0x00	; 0
	DDRC|=0b11110000 ; 
	DDRC&=0xF0 ; 
	PORTC|=0x0F ; 
	while(1){
	for (unsigned char col = 0 ; col<4 ; col++){
 112:	80 e0       	ldi	r24, 0x00	; 0
		PORTC|=0xF0 ;
 114:	95 b3       	in	r25, 0x15	; 21
 116:	90 6f       	ori	r25, 0xF0	; 240
 118:	95 bb       	out	0x15, r25	; 21
		PORTC&= ~(1<<(col+4)) ;
 11a:	25 b3       	in	r18, 0x15	; 21
 11c:	af 01       	movw	r20, r30
 11e:	06 2e       	mov	r0, r22
 120:	02 c0       	rjmp	.+4      	; 0x126 <Get_Pressed_key+0x2e>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <Get_Pressed_key+0x2a>
 12a:	94 2f       	mov	r25, r20
 12c:	90 95       	com	r25
 12e:	92 23       	and	r25, r18
 130:	95 bb       	out	0x15, r25	; 21
		
		for (unsigned char row = 0 ; row<4 ; row++){
			if (!(PINC&(1<<row))){
 132:	98 9b       	sbis	0x13, 0	; 19
 134:	0e c0       	rjmp	.+28     	; 0x152 <Get_Pressed_key+0x5a>
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	94 2f       	mov	r25, r20
 13c:	23 b3       	in	r18, 0x13	; 19
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	04 2e       	mov	r0, r20
 142:	02 c0       	rjmp	.+4      	; 0x148 <Get_Pressed_key+0x50>
 144:	35 95       	asr	r19
 146:	27 95       	ror	r18
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <Get_Pressed_key+0x4c>
 14c:	20 fd       	sbrc	r18, 0
 14e:	09 c0       	rjmp	.+18     	; 0x162 <Get_Pressed_key+0x6a>
 150:	01 c0       	rjmp	.+2      	; 0x154 <Get_Pressed_key+0x5c>
	while(1){
	for (unsigned char col = 0 ; col<4 ; col++){
		PORTC|=0xF0 ;
		PORTC&= ~(1<<(col+4)) ;
		
		for (unsigned char row = 0 ; row<4 ; row++){
 152:	90 e0       	ldi	r25, 0x00	; 0
			if (!(PINC&(1<<row))){
				
					return Key_configuration((row*4)+col+1) ; 
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	99 0f       	add	r25, r25
 158:	99 0f       	add	r25, r25
 15a:	89 0f       	add	r24, r25
 15c:	0e 94 51 00 	call	0xa2	; 0xa2 <Key_configuration>
 160:	08 95       	ret
 162:	4f 5f       	subi	r20, 0xFF	; 255
 164:	5f 4f       	sbci	r21, 0xFF	; 255
	while(1){
	for (unsigned char col = 0 ; col<4 ; col++){
		PORTC|=0xF0 ;
		PORTC&= ~(1<<(col+4)) ;
		
		for (unsigned char row = 0 ; row<4 ; row++){
 166:	44 30       	cpi	r20, 0x04	; 4
 168:	51 05       	cpc	r21, r1
 16a:	39 f7       	brne	.-50     	; 0x13a <Get_Pressed_key+0x42>
{
	DDRC|=0b11110000 ; 
	DDRC&=0xF0 ; 
	PORTC|=0x0F ; 
	while(1){
	for (unsigned char col = 0 ; col<4 ; col++){
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	6f 5f       	subi	r22, 0xFF	; 255
 170:	7f 4f       	sbci	r23, 0xFF	; 255
 172:	84 30       	cpi	r24, 0x04	; 4
 174:	79 f6       	brne	.-98     	; 0x114 <Get_Pressed_key+0x1c>
 176:	cb cf       	rjmp	.-106    	; 0x10e <Get_Pressed_key+0x16>

00000178 <LCD_Command>:
	LCD_Command(CURSOR_OFF) ; 
}

void LCD_Command( unsigned char cmnd )
{
	Data_Port = (Data_Port & 0x0f) | (cmnd & 0xf0) ; 
 178:	9b b3       	in	r25, 0x1b	; 27
 17a:	9f 70       	andi	r25, 0x0F	; 15
 17c:	28 2f       	mov	r18, r24
 17e:	20 7f       	andi	r18, 0xF0	; 240
 180:	92 2b       	or	r25, r18
 182:	9b bb       	out	0x1b, r25	; 27
	CTL_Port &= ~(1<<RS) ; 
 184:	c1 98       	cbi	0x18, 1	; 24
	CTL_Port &= ~(1<<RW) ; 
 186:	c2 98       	cbi	0x18, 2	; 24
	
	CTL_Port |= (1<<EN) ; 
 188:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	32 e0       	ldi	r19, 0x02	; 2
 18c:	3a 95       	dec	r19
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_Command+0x14>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_Command+0x1a>
	_delay_us(1) ; 
	CTL_Port &= ~(1<<EN) ;
 192:	c3 98       	cbi	0x18, 3	; 24
 194:	ef e8       	ldi	r30, 0x8F	; 143
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Command+0x20>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Command+0x26>
 19e:	00 00       	nop
	_delay_us(200) ; 
	
	Data_Port = (Data_Port & 0x0f) | (cmnd <<4) ; 
 1a0:	2b b3       	in	r18, 0x1b	; 27
 1a2:	2f 70       	andi	r18, 0x0F	; 15
 1a4:	f0 e1       	ldi	r31, 0x10	; 16
 1a6:	8f 9f       	mul	r24, r31
 1a8:	c0 01       	movw	r24, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	82 2b       	or	r24, r18
 1ae:	8b bb       	out	0x1b, r24	; 27
	
	CTL_Port |= (1<<EN) ;
 1b0:	c3 9a       	sbi	0x18, 3	; 24
 1b2:	32 e0       	ldi	r19, 0x02	; 2
 1b4:	3a 95       	dec	r19
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCD_Command+0x3c>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCD_Command+0x42>
	_delay_us(1) ;
	CTL_Port &= ~(1<<EN) ;
 1ba:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	8f e9       	ldi	r24, 0x9F	; 159
 1be:	9f e0       	ldi	r25, 0x0F	; 15
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_Command+0x48>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_Command+0x4e>
 1c6:	00 00       	nop
 1c8:	08 95       	ret

000001ca <LCD_Init>:
 */ 

#include "LCD_LIB.h"
void LCD_Init()
{
	Data_Port_dir |= 0xf0 ; 
 1ca:	8a b3       	in	r24, 0x1a	; 26
 1cc:	80 6f       	ori	r24, 0xF0	; 240
 1ce:	8a bb       	out	0x1a, r24	; 26
	CTL_Port_dir |= (1<<RS) | (1<<RW)| (1<<EN) ; 
 1d0:	87 b3       	in	r24, 0x17	; 23
 1d2:	8e 60       	ori	r24, 0x0E	; 14
 1d4:	87 bb       	out	0x17, r24	; 23
 1d6:	8f e3       	ldi	r24, 0x3F	; 63
 1d8:	9c e9       	ldi	r25, 0x9C	; 156
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCD_Init+0x10>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <LCD_Init+0x16>
 1e0:	00 00       	nop
	
	_delay_ms(20) ; 
	
	LCD_Command(FOUR_BITS_DATA_MODE) ; 
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_Command>
	LCD_Command(TWO_LINE_LCD_FOUR_BIT_MODE) ; 
 1e8:	88 e2       	ldi	r24, 0x28	; 40
 1ea:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_Command>
	LCD_Command(CLEAR_LCD) ; 
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_Command>
	LCD_Command(CURSOR_OFF) ; 
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_Command>
 1fa:	08 95       	ret

000001fc <LCD_Char>:
	
}

void LCD_Char( unsigned char data )
{
	Data_Port = (Data_Port & 0x0F) | (data & 0xF0) ;
 1fc:	9b b3       	in	r25, 0x1b	; 27
 1fe:	9f 70       	andi	r25, 0x0F	; 15
 200:	28 2f       	mov	r18, r24
 202:	20 7f       	andi	r18, 0xF0	; 240
 204:	92 2b       	or	r25, r18
 206:	9b bb       	out	0x1b, r25	; 27
	CTL_Port |= (1<<RS) ;
 208:	c1 9a       	sbi	0x18, 1	; 24
	CTL_Port &= ~(1<<RW) ;
 20a:	c2 98       	cbi	0x18, 2	; 24
	
	CTL_Port |= (1<<EN) ;
 20c:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	32 e0       	ldi	r19, 0x02	; 2
 210:	3a 95       	dec	r19
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_Char+0x14>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_Char+0x1a>
	_delay_us(1) ;
	CTL_Port &= ~(1<<EN) ;
 216:	c3 98       	cbi	0x18, 3	; 24
 218:	ef e8       	ldi	r30, 0x8F	; 143
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_Char+0x20>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_Char+0x26>
 222:	00 00       	nop
	_delay_us(200) ;
	
	Data_Port = (Data_Port & 0x0F) | (data <<4) ;
 224:	2b b3       	in	r18, 0x1b	; 27
 226:	2f 70       	andi	r18, 0x0F	; 15
 228:	f0 e1       	ldi	r31, 0x10	; 16
 22a:	8f 9f       	mul	r24, r31
 22c:	c0 01       	movw	r24, r0
 22e:	11 24       	eor	r1, r1
 230:	82 2b       	or	r24, r18
 232:	8b bb       	out	0x1b, r24	; 27
	
	CTL_Port |= (1<<EN) ;
 234:	c3 9a       	sbi	0x18, 3	; 24
 236:	32 e0       	ldi	r19, 0x02	; 2
 238:	3a 95       	dec	r19
 23a:	f1 f7       	brne	.-4      	; 0x238 <LCD_Char+0x3c>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <LCD_Char+0x42>
	_delay_us(1) ;
	CTL_Port &= ~(1<<EN) ;
 23e:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	8f e9       	ldi	r24, 0x9F	; 159
 242:	9f e0       	ldi	r25, 0x0F	; 15
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <LCD_Char+0x48>
 248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_Char+0x4e>
 24a:	00 00       	nop
 24c:	08 95       	ret

0000024e <LCD_String>:
	_delay_ms(2) ;
}

void LCD_String( char* string )
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
	for (int i = 0 ; string[i] !=0 ; i++){
 254:	88 81       	ld	r24, Y
 256:	88 23       	and	r24, r24
 258:	31 f0       	breq	.+12     	; 0x266 <LCD_String+0x18>
 25a:	21 96       	adiw	r28, 0x01	; 1
		LCD_Char( string[i]) ; 
 25c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_Char>
	_delay_ms(2) ;
}

void LCD_String( char* string )
{
	for (int i = 0 ; string[i] !=0 ; i++){
 260:	89 91       	ld	r24, Y+
 262:	81 11       	cpse	r24, r1
 264:	fb cf       	rjmp	.-10     	; 0x25c <LCD_String+0xe>
 266:	8f e9       	ldi	r24, 0x9F	; 159
 268:	9f e0       	ldi	r25, 0x0F	; 15
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_String+0x1c>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_String+0x22>
 270:	00 00       	nop
		LCD_Char( string[i]) ; 
		
	}
	
	_delay_ms(2) ;
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <main>:
#include <avr/io.h>
#include <stdlib.h>
#include "LCD_LIB.h"
#include "get_pressed_key.h"
int main(void)
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	64 97       	sbiw	r28, 0x14	; 20
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
	LCD_Init() ;
 28c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_Init>
	
	 int x = 0  ;                            //first number
	 int z = 0  ;                           //second number
	 int result = 0 ;
	 unsigned char y = 0 ;                 //carries only one digit or sign 
	 unsigned char n = 0 ;                //carries only one digit or sign
 290:	51 2c       	mov	r5, r1
{
	LCD_Init() ;
	
	 int x = 0  ;                            //first number
	 int z = 0  ;                           //second number
	 int result = 0 ;
 292:	81 2c       	mov	r8, r1
 294:	91 2c       	mov	r9, r1
int main(void)
{
	LCD_Init() ;
	
	 int x = 0  ;                            //first number
	 int z = 0  ;                           //second number
 296:	c1 2c       	mov	r12, r1
 298:	d1 2c       	mov	r13, r1
#include "get_pressed_key.h"
int main(void)
{
	LCD_Init() ;
	
	 int x = 0  ;                            //first number
 29a:	e1 2c       	mov	r14, r1
 29c:	f1 2c       	mov	r15, r1
			
			 if (y == 'R')
			 {
				 LCD_Command(CLEAR_LCD) ;
				 x = 0 ;
				 z = 0 ;
 29e:	61 2c       	mov	r6, r1
 2a0:	71 2c       	mov	r7, r1
	char buffer[20] ;                   
	

	while (1)
	{
		count = 0 ;
 2a2:	a1 2c       	mov	r10, r1
 2a4:	b1 2c       	mov	r11, r1
		
		while (((y =  Get_Pressed_key())|| (y==0)) && (y!='+') && (y!='-') && (y!='*') && (y!='/') && (y != '=')  )
 2a6:	2f c0       	rjmp	.+94     	; 0x306 <main+0x8e>
		{
			
			 if (y == 'R')
 2a8:	02 35       	cpi	r16, 0x52	; 82
 2aa:	41 f4       	brne	.+16     	; 0x2bc <main+0x44>
			 {
				 LCD_Command(CLEAR_LCD) ;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_Command>
				 x = 0 ;
				 z = 0 ;
 2b2:	c6 2c       	mov	r12, r6
 2b4:	d7 2c       	mov	r13, r7
		{
			
			 if (y == 'R')
			 {
				 LCD_Command(CLEAR_LCD) ;
				 x = 0 ;
 2b6:	e6 2c       	mov	r14, r6
 2b8:	f7 2c       	mov	r15, r7
				 z = 0 ;
				 continue;
 2ba:	25 c0       	rjmp	.+74     	; 0x306 <main+0x8e>
			 }
			 
			
			itoa(y,buffer,10) ;
 2bc:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2be:	4a e0       	ldi	r20, 0x0A	; 10
 2c0:	be 01       	movw	r22, r28
 2c2:	6f 5f       	subi	r22, 0xFF	; 255
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	c8 01       	movw	r24, r16
 2c8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__itoa_ncheck>
			LCD_String(buffer) ;
 2cc:	ce 01       	movw	r24, r28
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_String>
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	82 e5       	ldi	r24, 0x52	; 82
 2d8:	97 e0       	ldi	r25, 0x07	; 7
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0x62>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x6c>
 2e4:	00 00       	nop
			_delay_ms(300) ;
			x =  x * 10 ; 
 2e6:	c7 01       	movw	r24, r14
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	ee 0c       	add	r14, r14
 2ee:	ff 1c       	adc	r15, r15
 2f0:	ee 0c       	add	r14, r14
 2f2:	ff 1c       	adc	r15, r15
 2f4:	ee 0c       	add	r14, r14
 2f6:	ff 1c       	adc	r15, r15
 2f8:	e8 0e       	add	r14, r24
 2fa:	f9 1e       	adc	r15, r25
			x = x + y  ;
 2fc:	e0 0e       	add	r14, r16
 2fe:	f1 1e       	adc	r15, r17
		count ++ ; 
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	a2 1a       	sub	r10, r18
 304:	b2 0a       	sbc	r11, r18

	while (1)
	{
		count = 0 ;
		
		while (((y =  Get_Pressed_key())|| (y==0)) && (y!='+') && (y!='-') && (y!='*') && (y!='/') && (y != '=')  )
 306:	0e 94 7c 00 	call	0xf8	; 0xf8 <Get_Pressed_key>
 30a:	08 2f       	mov	r16, r24
 30c:	8d 7f       	andi	r24, 0xFD	; 253
 30e:	8d 32       	cpi	r24, 0x2D	; 45
 310:	09 f4       	brne	.+2      	; 0x314 <main+0x9c>
 312:	ac c0       	rjmp	.+344    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 314:	86 ed       	ldi	r24, 0xD6	; 214
 316:	80 0f       	add	r24, r16
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	08 f4       	brcc	.+2      	; 0x31e <main+0xa6>
 31c:	a7 c0       	rjmp	.+334    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 31e:	0d 33       	cpi	r16, 0x3D	; 61
 320:	19 f6       	brne	.-122    	; 0x2a8 <main+0x30>
			x =  x * 10 ; 
			x = x + y  ;
		count ++ ; 
		}
		
		if (count == 0 ){
 322:	ab 28       	or	r10, r11
 324:	71 f4       	brne	.+28     	; 0x342 <main+0xca>
			LCD_String(" SYNTAX ERROR ! ") ;
 326:	80 e6       	ldi	r24, 0x60	; 96
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_String>
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	90 e7       	ldi	r25, 0x70	; 112
 332:	22 e0       	ldi	r18, 0x02	; 2
 334:	81 50       	subi	r24, 0x01	; 1
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	20 40       	sbci	r18, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0xbc>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0xc6>
 33e:	00 00       	nop
			_delay_ms(100) ; 
			continue; 
 340:	b0 cf       	rjmp	.-160    	; 0x2a2 <main+0x2a>
		}
		
			
		 LCD_Char(y) ; 
 342:	8d e3       	ldi	r24, 0x3D	; 61
 344:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_Char>
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	92 e5       	ldi	r25, 0x52	; 82
 34c:	27 e0       	ldi	r18, 0x07	; 7
 34e:	81 50       	subi	r24, 0x01	; 1
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	20 40       	sbci	r18, 0x00	; 0
 354:	e1 f7       	brne	.-8      	; 0x34e <main+0xd6>
 356:	00 c0       	rjmp	.+0      	; 0x358 <main+0xe0>
 358:	00 00       	nop
			
			_delay_ms(300) ;

		}
		
		LCD_Char(n) ;
 35a:	85 2d       	mov	r24, r5
 35c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_Char>
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	92 e5       	ldi	r25, 0x52	; 82
 364:	27 e0       	ldi	r18, 0x07	; 7
 366:	81 50       	subi	r24, 0x01	; 1
 368:	90 40       	sbci	r25, 0x00	; 0
 36a:	20 40       	sbci	r18, 0x00	; 0
 36c:	e1 f7       	brne	.-8      	; 0x366 <main+0xee>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <main+0xf8>
 370:	00 00       	nop
 372:	62 c0       	rjmp	.+196    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		
	
		while ( (y != '=') && ((n = Get_Pressed_key ())|| (n==0))  && (n != '=')  )
		{
			
			itoa(n,buffer,10) ;
 374:	a5 2c       	mov	r10, r5
 376:	b1 2c       	mov	r11, r1
 378:	4a e0       	ldi	r20, 0x0A	; 10
 37a:	be 01       	movw	r22, r28
 37c:	6f 5f       	subi	r22, 0xFF	; 255
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	c5 01       	movw	r24, r10
 382:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__itoa_ncheck>
			LCD_String(buffer) ; 
 386:	ce 01       	movw	r24, r28
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_String>
			z = z * 10 ;
 38e:	c6 01       	movw	r24, r12
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	cc 0c       	add	r12, r12
 396:	dd 1c       	adc	r13, r13
 398:	cc 0c       	add	r12, r12
 39a:	dd 1c       	adc	r13, r13
 39c:	cc 0c       	add	r12, r12
 39e:	dd 1c       	adc	r13, r13
 3a0:	c8 0e       	add	r12, r24
 3a2:	d9 1e       	adc	r13, r25
			z = z + n  ;
 3a4:	ca 0c       	add	r12, r10
 3a6:	db 1c       	adc	r13, r11
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	92 e5       	ldi	r25, 0x52	; 82
 3ac:	27 e0       	ldi	r18, 0x07	; 7
 3ae:	81 50       	subi	r24, 0x01	; 1
 3b0:	90 40       	sbci	r25, 0x00	; 0
 3b2:	20 40       	sbci	r18, 0x00	; 0
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <main+0x136>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <main+0x140>
 3b8:	00 00       	nop
			
		 LCD_Char(y) ; 
		_delay_ms(300) ;
		
	
		while ( (y != '=') && ((n = Get_Pressed_key ())|| (n==0))  && (n != '=')  )
 3ba:	0e 94 7c 00 	call	0xf8	; 0xf8 <Get_Pressed_key>
 3be:	58 2e       	mov	r5, r24
 3c0:	8d e3       	ldi	r24, 0x3D	; 61
 3c2:	58 12       	cpse	r5, r24
 3c4:	d7 cf       	rjmp	.-82     	; 0x374 <main+0xfc>
			
			_delay_ms(300) ;

		}
		
		LCD_Char(n) ;
 3c6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_Char>
 3ca:	9f ef       	ldi	r25, 0xFF	; 255
 3cc:	22 e5       	ldi	r18, 0x52	; 82
 3ce:	87 e0       	ldi	r24, 0x07	; 7
 3d0:	91 50       	subi	r25, 0x01	; 1
 3d2:	20 40       	sbci	r18, 0x00	; 0
 3d4:	80 40       	sbci	r24, 0x00	; 0
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <main+0x158>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <main+0x162>
 3da:	00 00       	nop
		_delay_ms(300) ;
	
		switch  (y){
 3dc:	0d 32       	cpi	r16, 0x2D	; 45
 3de:	79 f0       	breq	.+30     	; 0x3fe <main+0x186>
 3e0:	28 f4       	brcc	.+10     	; 0x3ec <main+0x174>
 3e2:	0a 32       	cpi	r16, 0x2A	; 42
 3e4:	81 f0       	breq	.+32     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3e6:	0b 32       	cpi	r16, 0x2B	; 43
 3e8:	31 f0       	breq	.+12     	; 0x3f6 <main+0x17e>
 3ea:	27 c0       	rjmp	.+78     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3ec:	0f 32       	cpi	r16, 0x2F	; 47
 3ee:	99 f0       	breq	.+38     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f0:	0d 33       	cpi	r16, 0x3D	; 61
 3f2:	11 f1       	breq	.+68     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3f4:	22 c0       	rjmp	.+68     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			case '+':
			result = x+z ;
 3f6:	47 01       	movw	r8, r14
 3f8:	8c 0c       	add	r8, r12
 3fa:	9d 1c       	adc	r9, r13
			break;
 3fc:	1e c0       	rjmp	.+60     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			
			case '-':
			result = x-z ;
 3fe:	47 01       	movw	r8, r14
 400:	8c 18       	sub	r8, r12
 402:	9d 08       	sbc	r9, r13
			break;
 404:	1a c0       	rjmp	.+52     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			
			case '*':
			result = x*z ;
 406:	ec 9c       	mul	r14, r12
 408:	40 01       	movw	r8, r0
 40a:	ed 9c       	mul	r14, r13
 40c:	90 0c       	add	r9, r0
 40e:	fc 9c       	mul	r15, r12
 410:	90 0c       	add	r9, r0
 412:	11 24       	eor	r1, r1
			break;
 414:	12 c0       	rjmp	.+36     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			
			case '/':
			if(z==0){
 416:	c1 14       	cp	r12, r1
 418:	d1 04       	cpc	r13, r1
 41a:	41 f4       	brne	.+16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
				LCD_Command(CLEAR_LCD) ; 
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_Command>
				LCD_String("LOGICAL ERROR !");
 422:	81 e7       	ldi	r24, 0x71	; 113
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_String>
 42a:	07 c0       	rjmp	.+14     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			}
			else{
			result = x/z ;
 42c:	c7 01       	movw	r24, r14
 42e:	b6 01       	movw	r22, r12
 430:	0e 94 3a 02 	call	0x474	; 0x474 <__divmodhi4>
 434:	4b 01       	movw	r8, r22
 436:	01 c0       	rjmp	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			}
			break;
			
			case '=':
			result = x ;
			break;
 438:	47 01       	movw	r8, r14
 43a:	4a e0       	ldi	r20, 0x0A	; 10
 43c:	be 01       	movw	r22, r28
 43e:	6f 5f       	subi	r22, 0xFF	; 255
 440:	7f 4f       	sbci	r23, 0xFF	; 255
 442:	c4 01       	movw	r24, r8
 444:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__itoa_ncheck>
			
		}

			itoa(result,buffer,10) ;
			LCD_String(buffer) ;
 448:	ce 01       	movw	r24, r28
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_String>
 450:	28 cf       	rjmp	.-432    	; 0x2a2 <main+0x2a>
			_delay_ms(100) ; 
			continue; 
		}
		
			
		 LCD_Char(y) ; 
 452:	80 2f       	mov	r24, r16
 454:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_Char>
 458:	9f ef       	ldi	r25, 0xFF	; 255
 45a:	22 e5       	ldi	r18, 0x52	; 82
 45c:	87 e0       	ldi	r24, 0x07	; 7
 45e:	91 50       	subi	r25, 0x01	; 1
 460:	20 40       	sbci	r18, 0x00	; 0
 462:	80 40       	sbci	r24, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 468:	00 00       	nop
 46a:	a7 cf       	rjmp	.-178    	; 0x3ba <main+0x142>
			x =  x * 10 ; 
			x = x + y  ;
		count ++ ; 
		}
		
		if (count == 0 ){
 46c:	ab 28       	or	r10, r11
 46e:	09 f4       	brne	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 470:	5a cf       	rjmp	.-332    	; 0x326 <main+0xae>
 472:	ef cf       	rjmp	.-34     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>

00000474 <__divmodhi4>:
 474:	97 fb       	bst	r25, 7
 476:	07 2e       	mov	r0, r23
 478:	16 f4       	brtc	.+4      	; 0x47e <__divmodhi4+0xa>
 47a:	00 94       	com	r0
 47c:	07 d0       	rcall	.+14     	; 0x48c <__divmodhi4_neg1>
 47e:	77 fd       	sbrc	r23, 7
 480:	09 d0       	rcall	.+18     	; 0x494 <__divmodhi4_neg2>
 482:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__udivmodhi4>
 486:	07 fc       	sbrc	r0, 7
 488:	05 d0       	rcall	.+10     	; 0x494 <__divmodhi4_neg2>
 48a:	3e f4       	brtc	.+14     	; 0x49a <__divmodhi4_exit>

0000048c <__divmodhi4_neg1>:
 48c:	90 95       	com	r25
 48e:	81 95       	neg	r24
 490:	9f 4f       	sbci	r25, 0xFF	; 255
 492:	08 95       	ret

00000494 <__divmodhi4_neg2>:
 494:	70 95       	com	r23
 496:	61 95       	neg	r22
 498:	7f 4f       	sbci	r23, 0xFF	; 255

0000049a <__divmodhi4_exit>:
 49a:	08 95       	ret

0000049c <__tablejump2__>:
 49c:	ee 0f       	add	r30, r30
 49e:	ff 1f       	adc	r31, r31
 4a0:	05 90       	lpm	r0, Z+
 4a2:	f4 91       	lpm	r31, Z
 4a4:	e0 2d       	mov	r30, r0
 4a6:	09 94       	ijmp

000004a8 <__udivmodhi4>:
 4a8:	aa 1b       	sub	r26, r26
 4aa:	bb 1b       	sub	r27, r27
 4ac:	51 e1       	ldi	r21, 0x11	; 17
 4ae:	07 c0       	rjmp	.+14     	; 0x4be <__udivmodhi4_ep>

000004b0 <__udivmodhi4_loop>:
 4b0:	aa 1f       	adc	r26, r26
 4b2:	bb 1f       	adc	r27, r27
 4b4:	a6 17       	cp	r26, r22
 4b6:	b7 07       	cpc	r27, r23
 4b8:	10 f0       	brcs	.+4      	; 0x4be <__udivmodhi4_ep>
 4ba:	a6 1b       	sub	r26, r22
 4bc:	b7 0b       	sbc	r27, r23

000004be <__udivmodhi4_ep>:
 4be:	88 1f       	adc	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	5a 95       	dec	r21
 4c4:	a9 f7       	brne	.-22     	; 0x4b0 <__udivmodhi4_loop>
 4c6:	80 95       	com	r24
 4c8:	90 95       	com	r25
 4ca:	bc 01       	movw	r22, r24
 4cc:	cd 01       	movw	r24, r26
 4ce:	08 95       	ret

000004d0 <__itoa_ncheck>:
 4d0:	bb 27       	eor	r27, r27
 4d2:	4a 30       	cpi	r20, 0x0A	; 10
 4d4:	31 f4       	brne	.+12     	; 0x4e2 <__itoa_ncheck+0x12>
 4d6:	99 23       	and	r25, r25
 4d8:	22 f4       	brpl	.+8      	; 0x4e2 <__itoa_ncheck+0x12>
 4da:	bd e2       	ldi	r27, 0x2D	; 45
 4dc:	90 95       	com	r25
 4de:	81 95       	neg	r24
 4e0:	9f 4f       	sbci	r25, 0xFF	; 255
 4e2:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__utoa_common>

000004e6 <__utoa_ncheck>:
 4e6:	bb 27       	eor	r27, r27

000004e8 <__utoa_common>:
 4e8:	fb 01       	movw	r30, r22
 4ea:	55 27       	eor	r21, r21
 4ec:	aa 27       	eor	r26, r26
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	aa 1f       	adc	r26, r26
 4f4:	a4 17       	cp	r26, r20
 4f6:	10 f0       	brcs	.+4      	; 0x4fc <__utoa_common+0x14>
 4f8:	a4 1b       	sub	r26, r20
 4fa:	83 95       	inc	r24
 4fc:	50 51       	subi	r21, 0x10	; 16
 4fe:	b9 f7       	brne	.-18     	; 0x4ee <__utoa_common+0x6>
 500:	a0 5d       	subi	r26, 0xD0	; 208
 502:	aa 33       	cpi	r26, 0x3A	; 58
 504:	08 f0       	brcs	.+2      	; 0x508 <__utoa_common+0x20>
 506:	a9 5d       	subi	r26, 0xD9	; 217
 508:	a1 93       	st	Z+, r26
 50a:	00 97       	sbiw	r24, 0x00	; 0
 50c:	79 f7       	brne	.-34     	; 0x4ec <__utoa_common+0x4>
 50e:	b1 11       	cpse	r27, r1
 510:	b1 93       	st	Z+, r27
 512:	11 92       	st	Z+, r1
 514:	cb 01       	movw	r24, r22
 516:	0c 94 8d 02 	jmp	0x51a	; 0x51a <strrev>

0000051a <strrev>:
 51a:	dc 01       	movw	r26, r24
 51c:	fc 01       	movw	r30, r24
 51e:	67 2f       	mov	r22, r23
 520:	71 91       	ld	r23, Z+
 522:	77 23       	and	r23, r23
 524:	e1 f7       	brne	.-8      	; 0x51e <strrev+0x4>
 526:	32 97       	sbiw	r30, 0x02	; 2
 528:	04 c0       	rjmp	.+8      	; 0x532 <strrev+0x18>
 52a:	7c 91       	ld	r23, X
 52c:	6d 93       	st	X+, r22
 52e:	70 83       	st	Z, r23
 530:	62 91       	ld	r22, -Z
 532:	ae 17       	cp	r26, r30
 534:	bf 07       	cpc	r27, r31
 536:	c8 f3       	brcs	.-14     	; 0x52a <strrev+0x10>
 538:	08 95       	ret

0000053a <_exit>:
 53a:	f8 94       	cli

0000053c <__stop_program>:
 53c:	ff cf       	rjmp	.-2      	; 0x53c <__stop_program>
